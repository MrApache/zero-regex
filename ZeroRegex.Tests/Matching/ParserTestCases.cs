using NUnit.Framework;
using RefinedShell.Tests.Matching;

namespace ZeroRegex.Tests;

internal sealed class ParserTestCases
{
    private readonly PatternTestCase[] TestCases =
    [
        new PatternTestCase(@"\s+", "    ", "    "),
        new PatternTestCase(@"\d+", "12345", "12345"),
        new PatternTestCase(@"\D+", "abcXYZ", "abcXYZ"),
        new PatternTestCase(@"\w+", "helloWorld123", "helloWorld123"),
        new PatternTestCase(@"\W+", "!@#$%^&*", "!@#$%^&*"),
        new PatternTestCase("[0-9]", "7", "7"),
        new PatternTestCase("[^0-9]", "a", "a"),
        new PatternTestCase("[a-z]", "g", "g"),
        new PatternTestCase("[A-Z]", "N", "N"),
        new PatternTestCase("[a-zA-Z]", "z", "z"),
        new PatternTestCase("[a-zA-Z0-9]", "4", "4"),
        new PatternTestCase("[^a-zA-Z]", "@", "@"),
        new PatternTestCase("[^a-zA-Z0-9]", "$", "$"),
        new PatternTestCase("^hello", "hello world", "hello"),
        new PatternTestCase("world$", "hello world", "world"),
        new PatternTestCase("^world$", "world", "world"),
        new PatternTestCase("(a|b|c)", "a", "a"),
        new PatternTestCase("(a|b|c)", "b", "b"),
        new PatternTestCase("(a|b|c)", "c", "c"),
        new PatternTestCase("(a|b|c)+", "abcabc", "abcabc"),
        new PatternTestCase("[a-z0-9]", "b", "b"),
        new PatternTestCase("[a-z0-9]", "3", "3"),
        new PatternTestCase("[^a-z0-9]", "$", "$"),
        new PatternTestCase("[-a-z]", "-", "-"),
        new PatternTestCase("[-a-z]", "g", "g"),
        new PatternTestCase(@"[a\-z]", "-", "-"),
        new PatternTestCase("[1-9]", "5", "5"),
        new PatternTestCase("[1-9]", "8", "8"),
        new PatternTestCase("[a-d][e-h]", "be", "be"),
        new PatternTestCase("[a-d][e-h]", "cf", "cf"),
        new PatternTestCase("[^a-d]", "x", "x"),
        new PatternTestCase("[^a-d]", "5", "5"),
        new PatternTestCase(".", "a", "a"),
        new PatternTestCase(".", "5", "5"),
        new PatternTestCase(".", "#", "#"),
        new PatternTestCase(@"\w\w", "ab", "ab"),
        new PatternTestCase(@"\w\w", "12", "12"),
        new PatternTestCase(@"\w\W", "a!", "a!"),
        new PatternTestCase(@"\W\W", "!!", "!!"),
        new PatternTestCase(@"\s\s", "  ", "  "),
        new PatternTestCase(@"\d\d\d", "123", "123"),
        new PatternTestCase(@"\D\D\D", "xyz", "xyz"),
        new PatternTestCase(@"\w+\d+", "abc123", "abc123"),
        new PatternTestCase(@"\w+\s+\w+", "hello world", "hello world"),
        new PatternTestCase(@"\w+\W+\w+", "hello@world", "hello@world"),
        new PatternTestCase(@"\w*\d*", "abc123", "abc123"),
        new PatternTestCase(@"\w*\d*", "xyz", "xyz"),
        new PatternTestCase(@"\\", "\\", "\\"),
        new PatternTestCase(@"\.", ".", "."),
        new PatternTestCase(@"\[", "[", "["),
        new PatternTestCase(@"\]", "]", "]"),
        new PatternTestCase(@"\(", "(", "("),
        new PatternTestCase(@"\)", ")", ")"),
        new PatternTestCase(@"\+", "+", "+"),
        new PatternTestCase(@"\*", "*", "*"),
        new PatternTestCase(@"\?", "?", "?"),
        new PatternTestCase(@"\$", "$", "$"),
        new PatternTestCase("^a", "a", "a"),
        new PatternTestCase("^a", "abc", "a"),
        new PatternTestCase("a$", "zba", "a"),
        new PatternTestCase("a$", "a", "a"),
        new PatternTestCase("^abc$", "abc", "abc"),
        //new PatternTestCase("^abc$", "abcd", ""),
        new PatternTestCase(@"[a-z]+\d+", "hello123", "hello123"),
        new PatternTestCase(@"[a-z]+\s+\d+", "abc 123", "abc 123"),
        new PatternTestCase(@"[a-zA-Z]+\d*\W", "abc123!", "abc123!"),
        new PatternTestCase(@"[\w\s]+", "hello world", "hello world"),
        new PatternTestCase(@"[\d\s]+", "123 456", "123 456"),
        new PatternTestCase(@"[\w\d]+", "abc123def456", "abc123def456"),
        new PatternTestCase(@"[\s\S]+", "anything!", "anything!"),
        new PatternTestCase("[^a-zA-Z]+", "1234@#$", "1234@#$"),
        new PatternTestCase("[a-z]+|[A-Z]+", "lowerUPPER", "lowerUPPER"),
        new PatternTestCase(@"(a|b|c)+\d+", "abc123", "abc123"),
        new PatternTestCase(@"\d+\D+", "123abc", "123abc"),
        new PatternTestCase(@"\w\W\w", "a!b", "a!b"),
        new PatternTestCase(@"\w+\d+[!@#]?", "abc123!", "abc123!"),
        new PatternTestCase(@"[abc]+\d*[^a-z]", "abc123@", "abc123@"),
        new PatternTestCase(@"(\w+)\s(\d+)", "hello 123", "hello 123"),
        new PatternTestCase(@"(\d+)\D+(\w+)", "123!abc", "123!abc"),
        new PatternTestCase(@"\t", "\t", "\t"),
        new PatternTestCase(@"\r", "\r", "\r"),
        new PatternTestCase(@"\v", "\v", "\v"),
        new PatternTestCase(@"\n", "\n", "\n"),
        new PatternTestCase(@"\s", " ", " "),
        new PatternTestCase(@"\s+", "     ", "     "),
        //new PatternTestCase(@"\s*", "", ""),
        new PatternTestCase(@"\S+", "nonspace", "nonspace"),
        new PatternTestCase(@"\S*\s*\S+", "hello world", "hello world"),
        new PatternTestCase("a.b", "acb", "acb"),
        new PatternTestCase("a.b", "a b", "a b"),
        new PatternTestCase("a.b", "azb", "azb"),
        new PatternTestCase(@"\w.\w", "a.b", "a.b"),
        new PatternTestCase(@"\w.\w", "a b", "a b"),
        new PatternTestCase(@"\w.\d", "a.3", "a.3"),
        new PatternTestCase("(ab)", "ab", "ab"),
        new PatternTestCase("(ab)+", "abab", "abab"),
        //new PatternTestCase("(ab)*", "", ""),

        new PatternTestCase("(ab)?", "ab", "ab"),
        new PatternTestCase("(ab|cd)", "ab", "ab"),
        new PatternTestCase("(ab|cd)", "cd", "cd"),
        new PatternTestCase("(ab|cd)+", "ababcdcd", "ababcdcd"),
        new PatternTestCase(@"(abc)+\d+", "abc123", "abc123"),
        new PatternTestCase("(a|b)(c|d)", "ac", "ac"),
        new PatternTestCase("(a|b)(c|d)", "bd", "bd"),
        new PatternTestCase("((a|b)+)(c|d)+", "ababd", "ababd"),
        new PatternTestCase(@"(\w+)\s+(\d+)", "hello 123", "hello 123"),
        new PatternTestCase(@"(\d+)\D+(\w+)", "123!abc", "123!abc"),
        new PatternTestCase(@"^\d+", "12345", "12345"),
        new PatternTestCase(@"\d+$", "12345", "12345"),
        new PatternTestCase(@"^\w+\d+$", "abc123", "abc123"),
        new PatternTestCase(@"^\s*\w+\s+$", "   abc   ", "   abc   "),
        new PatternTestCase("^.+$", "anything", "anything"),
        new PatternTestCase(@"^.+\s$", "hello ", "hello ")
    ];


    [Test]
    public void Test()
    {
        foreach(PatternTestCase testCase in TestCases.Skip(110 - 33)) {
            Pattern matcher = PatternBuilder.Build(testCase.Pattern);
            //Matcher matcher = new Matcher(testCase.Pattern);
            Match match = matcher.Match(testCase.Example);
            Assert.That(match.Success, Is.True, $"Test case: {testCase}");
            Assert.That(testCase.Example.Substring(match.Start, match.Length),
                Is.EqualTo(testCase.Result), $"Test case: {testCase}");
        }
    }
}
